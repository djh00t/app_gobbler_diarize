# for details see https://stackoverflow.com/questions/36237477/python-docstrings-to-github-readme-md
# further details in https://blog.matteoferla.com/2019/11/convert-python-docstrings-to-github.html

import re
import shutil
import os
import subprocess

# ## Settings
# Find git repo root directory
git_repo_root = subprocess.run(["git", "rev-parse", "--show-toplevel"], capture_output=True).stdout.decode().strip()
print("git repo root directory is:          ",git_repo_root)

# Get git repo name
git_repo_name = os.path.basename(git_repo_root)
print("git repo name is:                    ",git_repo_name)

# Get author name from git config
author_name = subprocess.run(["git", "config", "user.name"], capture_output=True).stdout.decode().strip()
# If author name is not set, prompt for author name and email, updating git
# config and setting author_name variable
if not author_name:
    author_name = input("Enter author name: ")
    subprocess.run(["git", "config", "--global", "user.name", author_name])
    author_email = input("Enter author email: ")
    subprocess.run(["git", "config", "--global", "user.email", author_email])
print("author name is:                      ",author_name)

# Output filename
output_filename = 'autogenerated_docs.md'

# ## Apidoc call
os.system('pip install -q -r '+git_repo_root+'/docs/requirements.txt')
os.chdir(git_repo_root)
arguments = ['-o',
            'Sphinx-docs',
            ".",
            'sphinx-apidoc',
            '--full',
            '-A',
            f"'${author_name}'",
            '--module-first',
            ]
# Print the command that will be executed with arguments
print("sphinx-apidocs call:")
print(" ".join(["sphinx-apidoc", *arguments]))

# Execute the command
proc = subprocess.run(["sphinx-apidoc", *arguments], capture_output=True)
if r := proc.stderr:
    raise RuntimeError(r.decode())
print(proc.stdout.decode())

# ## tweak configuration
print("Tweaking configuration")
with open('Sphinx-docs/conf.py') as fh:
    conf_codeblock = fh.read()
conf_codeblock = conf_codeblock.replace('# import os', 'import os') \
    .replace('# import sys', 'import sys\nsys.path.insert(0, os.path.abspath("../"))') \
    .replace("'sphinx.ext.autodoc',", "'sphinx.ext.autodoc',\n'sphinx_autodoc_typehints',")
conf_codeblock += '''
def skip(app, what, name, obj, would_skip, options):
    if name in ( '__init__',):
        return False
    return would_skip
def setup(app):
    app.connect('autodoc-skip-member', skip)
'''

# Save the tweaked configuration to a temporary file called new_conf.py
# First copy the original conf.py to new_conf.py
shutil.copy('Sphinx-docs/conf.py', 'Sphinx-docs/new_conf.py')

# Next, open new_conf.py and write the tweaked configuration to it
with open('Sphinx-docs/new_conf.py', 'w') as fh:
    fh.write(conf_codeblock)

# Now create a diff of the new and old conf.py files
proc = subprocess.run(["diff", "Sphinx-docs/conf.py", "Sphinx-docs/new_conf.py"], capture_output=True)
if r := proc.stderr:
    raise RuntimeError(r.decode())
print(proc.stdout.decode())

# Overwrite the original conf.py with the tweaked configuration
with open('Sphinx-docs/conf.py', 'w') as fh:
    fh.write(conf_codeblock)

# Remove the temporary new_conf.py file
os.remove('Sphinx-docs/new_conf.py')

# ## Make

os.chdir('Sphinx-docs')
os.system('make markdown')
os.chdir('..')

# ## Consolidate Markdown

folder = 'Sphinx-docs/_build/markdown'

def clean_markdown(markdown):
    markdown = re.sub(r'\n+    \* ', '\n * ', markdown)
    markdown = re.sub(r'\n+\* ', '\n* ', markdown)
    return markdown.replace('    *', '*')\
                   .replace('>>> ', '')

with open(os.path.join(folder, git_repo_name+'.md')) as fh:
    markdown = clean_markdown(fh.read())
for filename in os.listdir(folder):
    if filename == git_repo_name+'.md':
        continue
    if git_repo_name not in filename:
        continue
    with open(os.path.join(folder, filename)) as fh:
        markdown += clean_markdown(fh.read())

with open(output_filename, 'w') as fh:
    fh.write(markdown)
    
# ## Removing Sphynx folder
shutil.rmtree('Sphinx-docs')